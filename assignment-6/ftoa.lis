     1                                  ; ftoa.asm - Float to ASCII Conversion without External Calls
     2                                  ; Input:
     3                                  ;   xmm0 - Float value to convert
     4                                  ;   rdi  - Return address for converted string
     5                                  ;   rdx  - Size of buffer
     6                                  
     7                                  global ftoa
     8                                  
     9                                  section .text
    10                                  ftoa:
    11                                      ; Preserve used registers
    12 00000000 55                          push rbp
    13 00000001 4889E5                      mov rbp, rsp
    14 00000004 53                          push rbx
    15 00000005 4154                        push r12
    16 00000007 4155                        push r13
    17                                  
    18                                      ; Clear the return buffer 
    19 00000009 4889D1                      mov rcx, rdx
    20 0000000C B000                        mov al, 0
    21 0000000E 4889FE                      mov rsi, rdi
    22 00000011 F3AA                        rep stosb
    23                                  
    24                                      ; Reset destination pointer
    25 00000013 4889F7                      mov rdi, rsi
    26                                  
    27                                      ; Check for negative number
    28 00000016 0F57C9                      xorps xmm1, xmm1
    29 00000019 0F2EC1                      ucomiss xmm0, xmm1
    30 0000001C 7315                        jae .positive
    31                                  
    32                                      ; Handle negative number
    33 0000001E C6072D                      mov byte [rdi], '-'
    34 00000021 48FFC7                      inc rdi
    35 00000024 F30F10C8                    movss xmm1, xmm0
    36 00000028 0F540D(00000000)            andps xmm1, [rel abs_mask]  ; Get absolute value
    37 0000002F F30F10C1                    movss xmm0, xmm1
    38                                  
    39                                  .positive:
    40                                      ; Extract whole number part
    41 00000033 F34C0F2CE0                  cvttss2si r12, xmm0   ; Convert float to integer
    42                                      
    43                                      ; Convert integer part to string (reverse)
    44 00000038 4889FB                      mov rbx, rdi          ; Save start of integer conversion
    45                                  .int_convert_loop:
    46 0000003B BA00000000                  mov rdx, 0
    47 00000040 4C89E0                      mov rax, r12
    48 00000043 B90A000000                  mov rcx, 10
    49 00000048 48F7F1                      div rcx
    50                                      
    51                                      ; Convert remainder to character
    52 0000004B 4883C230                    add rdx, '0'
    53 0000004F 8817                        mov byte [rdi], dl
    54 00000051 48FFC7                      inc rdi
    55                                      
    56 00000054 4989C4                      mov r12, rax
    57 00000057 4D85E4                      test r12, r12
    58 0000005A 75DF                        jnz .int_convert_loop
    59                                  
    60                                      ; Reverse integer part
    61 0000005C 4989FD                      mov r13, rdi          ; Save end of integer part
    62 0000005F 49FFCD                      dec r13
    63                                  .reverse_int:
    64 00000062 4C39EB                      cmp rbx, r13
    65 00000065 7D14                        jge .decimal_point
    66                                      
    67 00000067 8A03                        mov al, [rbx]
    68 00000069 418A4D00                    mov cl, [r13]
    69 0000006D 880B                        mov [rbx], cl
    70 0000006F 41884500                    mov [r13], al
    71                                      
    72 00000073 48FFC3                      inc rbx
    73 00000076 49FFCD                      dec r13
    74 00000079 EBE7                        jmp .reverse_int
    75                                  
    76                                  .decimal_point:
    77                                      ; Add decimal point
    78 0000007B C6072E                      mov byte [rdi], '.'
    79 0000007E 48FFC7                      inc rdi
    80                                  
    81                                      ; Extract fractional part
    82 00000081 F30F10C8                    movss xmm1, xmm0
    83 00000085 F34C0F2CE1                  cvttss2si r12, xmm1   ; Whole number part again
    84 0000008A F30F5CC1                    subss xmm0, xmm1      ; Subtract whole part to get fractional
    85                                  
    86                                      ; Multiply fractional part to get precision (6 decimal places)
    87 0000008E F30F100D(10000000)          movss xmm1, [rel million]
    88 00000096 F30F59C1                    mulss xmm0, xmm1
    89                                      
    90                                      ; Convert fractional part
    91 0000009A F34C0F2CE0                  cvttss2si r12, xmm0   ; Convert fractional part to integer
    92                                  
    93                                      ; Pad with zeros if needed
    94 0000009F B906000000                  mov rcx, 6
    95                                  .frac_zero_pad:
    96 000000A4 BA00000000                  mov rdx, 0
    97 000000A9 4C89E0                      mov rax, r12
    98 000000AC BB0A000000                  mov rbx, 10
    99 000000B1 48F7F3                      div rbx
   100                                      
   101                                      ; Convert remainder to character
   102 000000B4 4883C230                    add rdx, '0'
   103 000000B8 8817                        mov byte [rdi], dl
   104 000000BA 48FFC7                      inc rdi
   105                                      
   106 000000BD 4989C4                      mov r12, rax
   107 000000C0 48FFC9                      dec rcx
   108 000000C3 75DF                        jnz .frac_zero_pad
   109                                  
   110                                      ; Null terminate
   111 000000C5 C60700                      mov byte [rdi], 0
   112                                  
   113                                      ; Restore registers
   114 000000C8 415D                        pop r13
   115 000000CA 415C                        pop r12
   116 000000CC 5B                          pop rbx
   117 000000CD 4889EC                      mov rsp, rbp
   118 000000D0 5D                          pop rbp
   119 000000D1 C3                          ret
   120                                  
   121                                  section .data
   122 00000000 FFFFFF7F0000000000-         abs_mask: dd 0x7FFFFFFF, 0, 0, 0
   122 00000009 00000000000000     
   123 00000010 002474490000000000-         million:  dd 1000000.0, 0, 0, 0
   123 00000019 00000000000000     
