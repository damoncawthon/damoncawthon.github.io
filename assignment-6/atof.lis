     1                                  global atof
     2                                  
     3                                  section .data
     4 00000000 0000000000000080            neg_mask dq 0x8000000000000000
     5                                  
     6                                  section .bss
     7                                      align 64
     8 00000000 <res 00000340>              storedata resb 832
     9                                  
    10                                  section .text
    11                                  atof:
    12                                      ; Back up
    13 00000000 55                          push    rbp
    14 00000001 4889E5                      mov     rbp, rsp
    15 00000004 53                          push    rbx
    16 00000005 51                          push    rcx
    17 00000006 52                          push    rdx
    18 00000007 56                          push    rsi
    19 00000008 57                          push    rdi
    20 00000009 4150                        push    r8 
    21 0000000B 4151                        push    r9 
    22 0000000D 4152                        push    r10
    23 0000000F 4153                        push    r11
    24 00000011 4154                        push    r12
    25 00000013 4155                        push    r13
    26 00000015 4156                        push    r14
    27 00000017 4157                        push    r15
    28 00000019 9C                          pushf
    29                                  
    30 0000001A B807000000                  mov     rax, 7
    31 0000001F BA00000000                  mov     rdx, 0
    32 00000024 0FAE2425[00000000]          xsave   [storedata]    
    33                                  
    34                                      ; Parameters
    35 0000002C 4989FF                      mov     r15, rdi            ; An array of char with null termination expected
    36                                  
    37                                      ; Find where the radix point is, if it exists
    38 0000002F 4D31F6                      xor     r14, r14            ; Index for the radix point
    39 00000032 49C7C5FFFFFFFF              mov     r13, -1              ; Flag for decimal point (-1 means not found)
    40                                  
    41                                  find_radix_loop:
    42 00000039 43803C372E                  cmp     byte[r15 + r14], '.'
    43 0000003E 740C                        je      found_radix_point
    44                                  
    45 00000040 43803C3700                  cmp     byte[r15 + r14], 0  ; Check for null terminator
    46 00000045 740A                        je      no_radix_point
    47                                  
    48 00000047 49FFC6                      inc     r14
    49 0000004A EBED                        jmp     find_radix_loop
    50                                  
    51                                  found_radix_point:
    52 0000004C 4D89F5                      mov     r13, r14            ; Store the radix point index
    53 0000004F EB0D                        jmp     parse_integer_start
    54                                  
    55                                  no_radix_point:
    56 00000051 41BE00000000                mov     r14, 0              ; Reset index to start of string
    57 00000057 49C7C5FFFFFFFF              mov     r13, -1             ; Indicate no decimal point
    58                                  
    59                                  parse_integer_start:
    60                                      ; Set up registers for integer part parsing
    61 0000005E 4D31E4                      xor     r12, r12            ; Integer total
    62 00000061 4D89F3                      mov     r11, r14            ; Make a copy of the start index
    63 00000064 49FFCB                      dec     r11                 
    64 00000067 4D31D2                      xor     r10, r10            ; Flag 0 = positive, 1 = negative
    65 0000006A B801000000                  mov     rax, 1              ; Integer multiplier 1, 10, 100, 1000,...
    66                                  
    67                                  parse_integer:
    68 0000006F 4983FB00                    cmp     r11, 0
    69 00000073 7C2E                        jl      finish_parse_integer
    70                                  
    71 00000075 438A0C1F                    mov     cl, byte[r15 + r11]
    72 00000079 80F92B                      cmp     cl, '+'
    73 0000007C 7425                        je      finish_parse_integer
    74 0000007E 80F92D                      cmp     cl, '-'
    75 00000081 741A                        je      parse_integer_negative
    76                                  
    77                                      ; Convert the ASCII character to integer and add it to the total
    78 00000083 80E930                      sub     cl, '0'             ; Subtract 48 from the ASCII to get integer value
    79 00000086 480FB6C9                    movzx   rcx, cl             ; Zero-extend the character to 64 bits
    80 0000008A 48F7E1                      mul     rcx                 ; Multiply current multiplier by digit
    81 0000008D 4901C4                      add     r12, rax            ; Add the multiplied value to the total
    82 00000090 B80A000000                  mov     rax, 10             ; Reset multiplier for next iteration
    83 00000095 48F7E0                      mul     rax                 ; Increase the multiplier exponentially by 10
    84                                  
    85 00000098 49FFCB                      dec     r11                 ; Move the index toward the front of the string
    86 0000009B EBD2                        jmp     parse_integer    
    87                                  
    88                                  parse_integer_negative:
    89 0000009D 41BA01000000                mov     r10, 1              ; Set r10 to 1 to flag the number as negative
    90                                  
    91                                  finish_parse_integer:
    92                                      ; Set up values for decimal part parsing  
    93 000000A3 66450F57ED                  xorpd   xmm13, xmm13        ; Decimal total
    94 000000A8 F2440F101D-                 movsd   xmm11, [rel ten_double]  ; 10.0 for divisor calculations
    94 000000AD (08000000)         
    95 000000B1 F2450F10E3                  movsd   xmm12, xmm11        ; Decimal divisor 10, 100, 1000,...
    96                                      
    97                                      ; Check if we have a decimal point
    98 000000B6 4983FDFF                    cmp     r13, -1
    99 000000BA 742A                        je      convert_integer
   100                                  
   101                                      ; Parsing decimal part
   102 000000BC 49FFC5                      inc     r13
   103                                  parse_decimal:
   104 000000BF 438A042F                    mov     al, byte [r15 + r13]
   105 000000C3 3C00                        cmp     al, 0               ; Stop at null terminator
   106 000000C5 741F                        je      convert_integer
   107                                  
   108 000000C7 2C30                        sub     al, '0'             ; Subtract 48 from the ASCII to get integer value
   109 000000C9 480FB6C0                    movzx   rax, al             ; Zero-extend the character to 64 bits
   110                                  
   111                                      ; Convert the ASCII character to decimal value
   112 000000CD F2480F2AC0                  cvtsi2sd xmm0, rax          ; Load the integer value into an xmm register for division
   113 000000D2 F2410F5EC4                  divsd   xmm0, xmm12         ; Divide the integer value by 10, 100, 1000,...
   114 000000D7 F2440F58E8                  addsd   xmm13, xmm0         ; Add the decimal value to the total
   115 000000DC F2450F59E3                  mulsd   xmm12, xmm11        ; Increase the decimal divisor exponentially by 10
   116                                  
   117 000000E1 49FFC5                      inc     r13
   118 000000E4 EBD9                        jmp     parse_decimal
   119                                  
   120                                  convert_integer:
   121                                      ; Add the parsed integer and decimal part together
   122 000000E6 F2490F2AC4                  cvtsi2sd xmm0, r12
   123 000000EB F2410F58C5                  addsd   xmm0, xmm13
   124                                  
   125                                      ; Check the negative flag 0 = positive, 1 = negative
   126 000000F0 4983FA00                    cmp     r10, 0
   127 000000F4 740D                        je      return
   128                                  
   129                                      ; Negate the number if the flag is 1
   130 000000F6 F20F100C25-                 movsd xmm1, [neg_mask]      ; Load the negation mask into xmm1
   130 000000FB [00000000]         
   131 000000FF 660F57C1                    xorpd xmm0, xmm1 
   132                                  
   133                                  return:
   134                                      ; Return
   135 00000103 6A00                        push    qword 0
   136 00000105 F20F110424                  movsd   [rsp], xmm0
   137                                  
   138 0000010A B807000000                  mov     rax, 7
   139 0000010F BA00000000                  mov     rdx, 0
   140 00000114 0FAE2C25[00000000]          xrstor  [storedata]
   141                                  
   142 0000011C F20F100424                  movsd   xmm0, [rsp]
   143 00000121 58                          pop     rax
   144                                  
   145                                      ; Restore
   146 00000122 9D                          popf          
   147 00000123 415F                        pop     r15
   148 00000125 415E                        pop     r14
   149 00000127 415D                        pop     r13
   150 00000129 415C                        pop     r12
   151 0000012B 415B                        pop     r11
   152 0000012D 415A                        pop     r10
   153 0000012F 4159                        pop     r9 
   154 00000131 4158                        pop     r8 
   155 00000133 5F                          pop     rdi
   156 00000134 5E                          pop     rsi
   157 00000135 5A                          pop     rdx
   158 00000136 59                          pop     rcx
   159 00000137 5B                          pop     rbx
   160 00000138 5D                          pop     rbp
   161                                  
   162 00000139 C3                          ret
   163                                  
   164                                  section .data
   165 00000008 0000000000002440            ten_double dq 10.0
