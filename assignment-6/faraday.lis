     1                                  ; Faraday Calculation Module
     2                                  ; Handles resistance calculation with Strlen Macro
     3                                  
     4                                  ; Macro for calculating string length
     5                                  %macro STRLEN 2  ; Two parameters: destination register, source string address
     6                                      push rdi    ; Preserve rdi
     7                                      mov rdi, %2 ; Move string address to rdi
     8                                      
     9                                      xor %1, %1  ; Zero out destination register
    10                                  %%strlen_loop:
    11                                      cmp byte [rdi], 0   ; Check for null terminator
    12                                      je %%strlen_done    ; If null, we're done
    13                                      inc rdi             ; Move to next character
    14                                      inc %1              ; Increment length
    15                                      jmp %%strlen_loop   ; Continue counting
    16                                  
    17                                  %%strlen_done:
    18                                      pop rdi             ; Restore rdi
    19                                  %endmacro
    20                                  
    21                                  section .data
    22 00000000 57656C636F6D652074-         welcome_msg db "Welcome to Electricity brought to you by Damon Cawthon.", 10, 0
    22 00000009 6F20456C6563747269-
    22 00000012 636974792062726F75-
    22 0000001B 67687420746F20796F-
    22 00000024 752062792044616D6F-
    22 0000002D 6E2043617774686F6E-
    22 00000036 2E0A00             
    23 00000039 506C6561736520656E-         name_prompt db "Please enter your full name: ", 0
    23 00000042 74657220796F757220-
    23 0000004B 66756C6C206E616D65-
    23 00000054 3A2000             
    24 00000057 506C6561736520656E-         career_prompt db "Please enter the career path you are following: ", 0
    24 00000060 746572207468652063-
    24 00000069 617265657220706174-
    24 00000072 6820796F7520617265-
    24 0000007B 20666F6C6C6F77696E-
    24 00000084 673A2000           
    25 00000088 506C6561736520656E-         emf_prompt db "Please enter the EMF of your circuit in volts: ", 0
    25 00000091 746572207468652045-
    25 0000009A 4D46206F6620796F75-
    25 000000A3 722063697263756974-
    25 000000AC 20696E20766F6C7473-
    25 000000B5 3A2000             
    26 000000B8 506C6561736520656E-         current_prompt db "Please enter the current in this circuit in amps: ", 0
    26 000000C1 746572207468652063-
    26 000000CA 757272656E7420696E-
    26 000000D3 207468697320636972-
    26 000000DC 6375697420696E2061-
    26 000000E5 6D70733A2000       
    27 000000EB 546865207265736973-         result_msg db "The resistance in this circuit is ", 0
    27 000000F4 74616E636520696E20-
    27 000000FD 746869732063697263-
    27 00000106 7569742069732000   
    28 0000010E 5468616E6B20796F75-         outro_msg db "Thank you ", 0
    28 00000117 2000               
    29 00000119 2E0A00                      dot_msg db ".", 10, 0
    30                                  
    31                                  section .bss
    32 00000000 <res 00000064>              input_buffer resb 100
    33 00000064 <res 00000064>              result_buffer resb 100
    34 000000C8 <res 00000008>              emf_value resq 1
    35 000000D0 <res 00000008>              current_value resq 1
    36 000000D8 <res 00000008>              resistance_value resq 1
    37                                  
    38                                  section .text
    39                                      global _start
    40                                      extern atof
    41                                      extern ftoa
    42                                  
    43                                  
    44                                  _start:
    45                                      ; Display welcome message
    46                                      STRLEN r9, welcome_msg
    46 00000000 57                  <1>  push rdi
    46 00000001 48BF-               <1>  mov rdi, %2
    46 00000003 [0000000000000000]  <1>
    46                              <1> 
    46 0000000B 4D31C9              <1>  xor %1, %1
    46                              <1> %%strlen_loop:
    46 0000000E 803F00              <1>  cmp byte [rdi], 0
    46 00000011 7408                <1>  je %%strlen_done
    46 00000013 48FFC7              <1>  inc rdi
    46 00000016 49FFC1              <1>  inc %1
    46 00000019 EBF3                <1>  jmp %%strlen_loop
    46                              <1> 
    46                              <1> %%strlen_done:
    46 0000001B 5F                  <1>  pop rdi
    47 0000001C B801000000                  mov rax, 1          ; sys_write
    48 00000021 BF01000000                  mov rdi, 1          ; stdout
    49 00000026 48BE-                       mov rsi, welcome_msg
    49 00000028 [0000000000000000] 
    50 00000030 4C89CA                      mov rdx, r9
    51 00000033 0F05                        syscall
    52                                  
    53                                      ; Prompt and get name
    54                                      STRLEN r9, name_prompt
    54 00000035 57                  <1>  push rdi
    54 00000036 48BF-               <1>  mov rdi, %2
    54 00000038 [3900000000000000]  <1>
    54                              <1> 
    54 00000040 4D31C9              <1>  xor %1, %1
    54                              <1> %%strlen_loop:
    54 00000043 803F00              <1>  cmp byte [rdi], 0
    54 00000046 7408                <1>  je %%strlen_done
    54 00000048 48FFC7              <1>  inc rdi
    54 0000004B 49FFC1              <1>  inc %1
    54 0000004E EBF3                <1>  jmp %%strlen_loop
    54                              <1> 
    54                              <1> %%strlen_done:
    54 00000050 5F                  <1>  pop rdi
    55 00000051 B801000000                  mov rax, 1          ; sys_write
    56 00000056 BF01000000                  mov rdi, 1          ; stdout
    57 0000005B 48BE-                       mov rsi, name_prompt
    57 0000005D [3900000000000000] 
    58 00000065 4C89CA                      mov rdx, r9
    59 00000068 0F05                        syscall
    60                                  
    61                                      ; Read name
    62 0000006A B800000000                  mov rax, 0          ; sys_read
    63 0000006F BF00000000                  mov rdi, 0          ; stdin
    64 00000074 48BE-                       mov rsi, input_buffer
    64 00000076 [0000000000000000] 
    65 0000007E BA64000000                  mov rdx, 100
    66 00000083 0F05                        syscall
    67                                  
    68                                      ; Prompt and get career path
    69                                      STRLEN r9, career_prompt
    69 00000085 57                  <1>  push rdi
    69 00000086 48BF-               <1>  mov rdi, %2
    69 00000088 [5700000000000000]  <1>
    69                              <1> 
    69 00000090 4D31C9              <1>  xor %1, %1
    69                              <1> %%strlen_loop:
    69 00000093 803F00              <1>  cmp byte [rdi], 0
    69 00000096 7408                <1>  je %%strlen_done
    69 00000098 48FFC7              <1>  inc rdi
    69 0000009B 49FFC1              <1>  inc %1
    69 0000009E EBF3                <1>  jmp %%strlen_loop
    69                              <1> 
    69                              <1> %%strlen_done:
    69 000000A0 5F                  <1>  pop rdi
    70 000000A1 B801000000                  mov rax, 1          ; sys_write
    71 000000A6 BF01000000                  mov rdi, 1          ; stdout
    72 000000AB 48BE-                       mov rsi, career_prompt
    72 000000AD [5700000000000000] 
    73 000000B5 4C89CA                      mov rdx, r9
    74 000000B8 0F05                        syscall
    75                                  
    76                                      ; Read career
    77 000000BA B800000000                  mov rax, 0          ; sys_read
    78 000000BF BF00000000                  mov rdi, 0          ; stdin
    79 000000C4 48BE-                       mov rsi, input_buffer
    79 000000C6 [0000000000000000] 
    80 000000CE BA64000000                  mov rdx, 100
    81 000000D3 0F05                        syscall
    82                                  
    83                                      ; Prompt and get EMF
    84                                      STRLEN r9, emf_prompt
    84 000000D5 57                  <1>  push rdi
    84 000000D6 48BF-               <1>  mov rdi, %2
    84 000000D8 [8800000000000000]  <1>
    84                              <1> 
    84 000000E0 4D31C9              <1>  xor %1, %1
    84                              <1> %%strlen_loop:
    84 000000E3 803F00              <1>  cmp byte [rdi], 0
    84 000000E6 7408                <1>  je %%strlen_done
    84 000000E8 48FFC7              <1>  inc rdi
    84 000000EB 49FFC1              <1>  inc %1
    84 000000EE EBF3                <1>  jmp %%strlen_loop
    84                              <1> 
    84                              <1> %%strlen_done:
    84 000000F0 5F                  <1>  pop rdi
    85 000000F1 B801000000                  mov rax, 1          ; sys_write
    86 000000F6 BF01000000                  mov rdi, 1          ; stdout
    87 000000FB 48BE-                       mov rsi, emf_prompt
    87 000000FD [8800000000000000] 
    88 00000105 4C89CA                      mov rdx, r9
    89 00000108 0F05                        syscall
    90                                  
    91                                      ; Read EMF
    92 0000010A B800000000                  mov rax, 0          ; sys_read
    93 0000010F BF00000000                  mov rdi, 0          ; stdin
    94 00000114 48BE-                       mov rsi, input_buffer
    94 00000116 [0000000000000000] 
    95 0000011E BA64000000                  mov rdx, 100
    96 00000123 0F05                        syscall
    97                                  
    98                                      ; Convert EMF to float
    99 00000125 48BF-                       mov rdi, input_buffer
    99 00000127 [0000000000000000] 
   100 0000012F E8(00000000)                call atof
   101 00000134 F20F110425-                 movsd [emf_value], xmm0
   101 00000139 [C8000000]         
   102                                  
   103                                      ; Prompt and get current
   104                                      STRLEN r9, current_prompt
   104 0000013D 57                  <1>  push rdi
   104 0000013E 48BF-               <1>  mov rdi, %2
   104 00000140 [B800000000000000]  <1>
   104                              <1> 
   104 00000148 4D31C9              <1>  xor %1, %1
   104                              <1> %%strlen_loop:
   104 0000014B 803F00              <1>  cmp byte [rdi], 0
   104 0000014E 7408                <1>  je %%strlen_done
   104 00000150 48FFC7              <1>  inc rdi
   104 00000153 49FFC1              <1>  inc %1
   104 00000156 EBF3                <1>  jmp %%strlen_loop
   104                              <1> 
   104                              <1> %%strlen_done:
   104 00000158 5F                  <1>  pop rdi
   105 00000159 B801000000                  mov rax, 1          ; sys_write
   106 0000015E BF01000000                  mov rdi, 1          ; stdout
   107 00000163 48BE-                       mov rsi, current_prompt
   107 00000165 [B800000000000000] 
   108 0000016D 4C89CA                      mov rdx, r9
   109 00000170 0F05                        syscall
   110                                  
   111                                      ; Read current
   112 00000172 B800000000                  mov rax, 0          ; sys_read
   113 00000177 BF00000000                  mov rdi, 0          ; stdin
   114 0000017C 48BE-                       mov rsi, input_buffer
   114 0000017E [0000000000000000] 
   115 00000186 BA64000000                  mov rdx, 100
   116 0000018B 0F05                        syscall
   117                                  
   118                                      ; Convert current to float
   119 0000018D 48BF-                       mov rdi, input_buffer
   119 0000018F [0000000000000000] 
   120 00000197 E8(00000000)                call atof
   121 0000019C F20F110425-                 movsd [current_value], xmm0
   121 000001A1 [D0000000]         
   122                                  
   123                                      ; Calculate resistance
   124 000001A5 F20F100425-                 movsd xmm0, [emf_value]
   124 000001AA [C8000000]         
   125 000001AE F20F100C25-                 movsd xmm1, [current_value]
   125 000001B3 [D0000000]         
   126 000001B7 F20F5EC1                    divsd xmm0, xmm1    ; EMF / Current
   127 000001BB F20F110425-                 movsd [resistance_value], xmm0
   127 000001C0 [D8000000]         
   128                                  
   129                                      ; Convert resistance to string
   130 000001C4 48BF-                       mov rdi, resistance_value
   130 000001C6 [D800000000000000] 
   131 000001CE 48BE-                       mov rsi, result_buffer
   131 000001D0 [6400000000000000] 
   132 000001D8 BA64000000                  mov rdx, 100
   133 000001DD E8(00000000)                call ftoa
   134                                  
   135                                      ; Display result message
   136                                      STRLEN r9, result_msg
   136 000001E2 57                  <1>  push rdi
   136 000001E3 48BF-               <1>  mov rdi, %2
   136 000001E5 [EB00000000000000]  <1>
   136                              <1> 
   136 000001ED 4D31C9              <1>  xor %1, %1
   136                              <1> %%strlen_loop:
   136 000001F0 803F00              <1>  cmp byte [rdi], 0
   136 000001F3 7408                <1>  je %%strlen_done
   136 000001F5 48FFC7              <1>  inc rdi
   136 000001F8 49FFC1              <1>  inc %1
   136 000001FB EBF3                <1>  jmp %%strlen_loop
   136                              <1> 
   136                              <1> %%strlen_done:
   136 000001FD 5F                  <1>  pop rdi
   137 000001FE B801000000                  mov rax, 1          ; sys_write
   138 00000203 BF01000000                  mov rdi, 1          ; stdout
   139 00000208 48BE-                       mov rsi, result_msg
   139 0000020A [EB00000000000000] 
   140 00000212 4C89CA                      mov rdx, r9
   141 00000215 0F05                        syscall
   142                                  
   143                                      ; Display resistance value
   144 00000217 B801000000                  mov rax, 1          ; sys_write
   145 0000021C BF01000000                  mov rdi, 1          ; stdout
   146 00000221 48BE-                       mov rsi, result_buffer
   146 00000223 [6400000000000000] 
   147 0000022B BA64000000                  mov rdx, 100
   148 00000230 0F05                        syscall
   149                                  
   150                                      ; Exit program
   151 00000232 B83C000000                  mov rax, 60         ; sys_exit
   152 00000237 4831FF                      xor rdi, rdi        ; exit code 0
   153 0000023A 0F05                        syscall
