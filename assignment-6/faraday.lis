     1                                  ; Faraday Calculation Module
     2                                  ; Handles resistance calculation with Strlen Macro
     3                                  
     4                                  ; Macro for calculating string length
     5                                  %macro STRLEN 2  ; Two parameters: destination register, source string address
     6                                      push rdi    ; Preserve rdi
     7                                      mov rdi, %2 ; Move string address to rdi
     8                                      
     9                                      xor %1, %1  ; Zero out destination register
    10                                  %%strlen_loop:
    11                                      cmp byte [rdi], 0   ; Check for null terminator
    12                                      je %%strlen_done    ; If null, we're done
    13                                      inc rdi             ; Move to next character
    14                                      inc %1              ; Increment length
    15                                      jmp %%strlen_loop   ; Continue counting
    16                                  
    17                                  %%strlen_done:
    18                                      pop rdi             ; Restore rdi
    19                                  %endmacro
    20                                  
    21                                  section .data
    22 00000000 57656C636F6D652074-         welcome_msg db "Welcome to Electricity brought to you by Damon Cawthon.", 10, 0
    22 00000009 6F20456C6563747269-
    22 00000012 636974792062726F75-
    22 0000001B 67687420746F20796F-
    22 00000024 752062792044616D6F-
    22 0000002D 6E2043617774686F6E-
    22 00000036 2E0A00             
    23 00000039 506C6561736520656E-         name_prompt db "Please enter your full name: ", 0
    23 00000042 74657220796F757220-
    23 0000004B 66756C6C206E616D65-
    23 00000054 3A2000             
    24 00000057 506C6561736520656E-         career_prompt db "Please enter the career path you are following: ", 0
    24 00000060 746572207468652063-
    24 00000069 617265657220706174-
    24 00000072 6820796F7520617265-
    24 0000007B 20666F6C6C6F77696E-
    24 00000084 673A2000           
    25 00000088 506C6561736520656E-         emf_prompt db "Please enter the EMF of your circuit in volts: ", 0
    25 00000091 746572207468652045-
    25 0000009A 4D46206F6620796F75-
    25 000000A3 722063697263756974-
    25 000000AC 20696E20766F6C7473-
    25 000000B5 3A2000             
    26 000000B8 506C6561736520656E-         current_prompt db "Please enter the current in this circuit in amps: ", 0
    26 000000C1 746572207468652063-
    26 000000CA 757272656E7420696E-
    26 000000D3 207468697320636972-
    26 000000DC 6375697420696E2061-
    26 000000E5 6D70733A2000       
    27 000000EB 546865207265736973-         result_msg db "The resistance in this circuit is ", 0
    27 000000F4 74616E636520696E20-
    27 000000FD 746869732063697263-
    27 00000106 7569742069732000   
    28 0000010E 5468616E6B20796F75-         outro_msg db "Thank you ", 0
    28 00000117 2000               
    29 00000119 2E0A00                      dot_msg db ".", 10, 0
    30                                  
    31                                  section .bss
    32                                      SYS_read equ 0
    33                                      SYS_write equ 1
    34                                      STDIN equ 0
    35                                      STDOUT equ 1
    36 00000000 <res 00000064>              input_buffer resb 100
    37 00000064 <res 00000064>              result_buffer resb 100
    38 000000C8 <res 00000008>              emf_value resq 1
    39 000000D0 <res 00000008>              current_value resq 1
    40 000000D8 <res 00000008>              resistance_value resq 1
    41                                  
    42                                  section .text
    43                                      global _start
    44                                      extern atof
    45                                      extern ftoa
    46                                  
    47                                  
    48                                  _start:
    49                                      ; Display welcome message
    50                                      STRLEN r9, welcome_msg
    50 00000000 57                  <1>  push rdi
    50 00000001 48BF-               <1>  mov rdi, %2
    50 00000003 [0000000000000000]  <1>
    50                              <1> 
    50 0000000B 4D31C9              <1>  xor %1, %1
    50                              <1> %%strlen_loop:
    50 0000000E 803F00              <1>  cmp byte [rdi], 0
    50 00000011 7408                <1>  je %%strlen_done
    50 00000013 48FFC7              <1>  inc rdi
    50 00000016 49FFC1              <1>  inc %1
    50 00000019 EBF3                <1>  jmp %%strlen_loop
    50                              <1> 
    50                              <1> %%strlen_done:
    50 0000001B 5F                  <1>  pop rdi
    51 0000001C B801000000                  mov rax, 1          ; sys_write
    52 00000021 BF01000000                  mov rdi, 1          ; stdout
    53 00000026 48BE-                       mov rsi, welcome_msg
    53 00000028 [0000000000000000] 
    54 00000030 4C89CA                      mov rdx, r9
    55 00000033 0F05                        syscall
    56                                  
    57                                      ; Prompt and get name
    58                                      STRLEN r9, name_prompt
    58 00000035 57                  <1>  push rdi
    58 00000036 48BF-               <1>  mov rdi, %2
    58 00000038 [3900000000000000]  <1>
    58                              <1> 
    58 00000040 4D31C9              <1>  xor %1, %1
    58                              <1> %%strlen_loop:
    58 00000043 803F00              <1>  cmp byte [rdi], 0
    58 00000046 7408                <1>  je %%strlen_done
    58 00000048 48FFC7              <1>  inc rdi
    58 0000004B 49FFC1              <1>  inc %1
    58 0000004E EBF3                <1>  jmp %%strlen_loop
    58                              <1> 
    58                              <1> %%strlen_done:
    58 00000050 5F                  <1>  pop rdi
    59 00000051 B801000000                  mov rax, 1          ; sys_write
    60 00000056 BF01000000                  mov rdi, 1          ; stdout
    61 0000005B 48BE-                       mov rsi, name_prompt
    61 0000005D [3900000000000000] 
    62 00000065 4C89CA                      mov rdx, r9
    63 00000068 0F05                        syscall
    64                                  
    65                                      ; Read name
    66 0000006A B800000000                  mov rax, 0          ; sys_read
    67 0000006F BF00000000                  mov rdi, 0          ; stdin
    68 00000074 48BE-                       mov rsi, input_buffer
    68 00000076 [0000000000000000] 
    69 0000007E BA64000000                  mov rdx, 100
    70 00000083 0F05                        syscall
    71                                  
    72                                      ; Prompt and get career path
    73                                      STRLEN r9, career_prompt
    73 00000085 57                  <1>  push rdi
    73 00000086 48BF-               <1>  mov rdi, %2
    73 00000088 [5700000000000000]  <1>
    73                              <1> 
    73 00000090 4D31C9              <1>  xor %1, %1
    73                              <1> %%strlen_loop:
    73 00000093 803F00              <1>  cmp byte [rdi], 0
    73 00000096 7408                <1>  je %%strlen_done
    73 00000098 48FFC7              <1>  inc rdi
    73 0000009B 49FFC1              <1>  inc %1
    73 0000009E EBF3                <1>  jmp %%strlen_loop
    73                              <1> 
    73                              <1> %%strlen_done:
    73 000000A0 5F                  <1>  pop rdi
    74 000000A1 B801000000                  mov rax, 1          ; sys_write
    75 000000A6 BF01000000                  mov rdi, 1          ; stdout
    76 000000AB 48BE-                       mov rsi, career_prompt
    76 000000AD [5700000000000000] 
    77 000000B5 4C89CA                      mov rdx, r9
    78 000000B8 0F05                        syscall
    79                                  
    80                                      ; Read career
    81 000000BA B800000000                  mov rax, 0          ; sys_read
    82 000000BF BF00000000                  mov rdi, 0          ; stdin
    83 000000C4 48BE-                       mov rsi, input_buffer
    83 000000C6 [0000000000000000] 
    84 000000CE BA64000000                  mov rdx, 100
    85 000000D3 0F05                        syscall
    86                                  
    87                                      ; Prompt and get EMF
    88                                      STRLEN r9, emf_prompt
    88 000000D5 57                  <1>  push rdi
    88 000000D6 48BF-               <1>  mov rdi, %2
    88 000000D8 [8800000000000000]  <1>
    88                              <1> 
    88 000000E0 4D31C9              <1>  xor %1, %1
    88                              <1> %%strlen_loop:
    88 000000E3 803F00              <1>  cmp byte [rdi], 0
    88 000000E6 7408                <1>  je %%strlen_done
    88 000000E8 48FFC7              <1>  inc rdi
    88 000000EB 49FFC1              <1>  inc %1
    88 000000EE EBF3                <1>  jmp %%strlen_loop
    88                              <1> 
    88                              <1> %%strlen_done:
    88 000000F0 5F                  <1>  pop rdi
    89 000000F1 B801000000                  mov rax, 1          ; sys_write
    90 000000F6 BF01000000                  mov rdi, 1          ; stdout
    91 000000FB 48BE-                       mov rsi, emf_prompt
    91 000000FD [8800000000000000] 
    92 00000105 4C89CA                      mov rdx, r9
    93 00000108 0F05                        syscall
    94                                  
    95                                      ; Read EMF
    96 0000010A B800000000                  mov rax, 0          ; sys_read
    97 0000010F BF00000000                  mov rdi, 0          ; stdin
    98 00000114 48BE-                       mov rsi, input_buffer
    98 00000116 [0000000000000000] 
    99 0000011E BA64000000                  mov rdx, 100
   100 00000123 0F05                        syscall
   101                                  
   102                                      ; Convert EMF to float
   103 00000125 48BF-                       mov rdi, input_buffer
   103 00000127 [0000000000000000] 
   104 0000012F E8(00000000)                call atof
   105 00000134 F20F110425-                 movsd [emf_value], xmm0
   105 00000139 [C8000000]         
   106                                  
   107                                      ; Prompt and get current
   108                                      STRLEN r9, current_prompt
   108 0000013D 57                  <1>  push rdi
   108 0000013E 48BF-               <1>  mov rdi, %2
   108 00000140 [B800000000000000]  <1>
   108                              <1> 
   108 00000148 4D31C9              <1>  xor %1, %1
   108                              <1> %%strlen_loop:
   108 0000014B 803F00              <1>  cmp byte [rdi], 0
   108 0000014E 7408                <1>  je %%strlen_done
   108 00000150 48FFC7              <1>  inc rdi
   108 00000153 49FFC1              <1>  inc %1
   108 00000156 EBF3                <1>  jmp %%strlen_loop
   108                              <1> 
   108                              <1> %%strlen_done:
   108 00000158 5F                  <1>  pop rdi
   109 00000159 B801000000                  mov rax, 1          ; sys_write
   110 0000015E BF01000000                  mov rdi, 1          ; stdout
   111 00000163 48BE-                       mov rsi, current_prompt
   111 00000165 [B800000000000000] 
   112 0000016D 4C89CA                      mov rdx, r9
   113 00000170 0F05                        syscall
   114                                  
   115                                      ; Read current
   116 00000172 B800000000                  mov rax, 0          ; sys_read
   117 00000177 BF00000000                  mov rdi, 0          ; stdin
   118 0000017C 48BE-                       mov rsi, input_buffer
   118 0000017E [0000000000000000] 
   119 00000186 BA64000000                  mov rdx, 100
   120 0000018B 0F05                        syscall
   121                                  
   122                                      ; Convert current to float
   123 0000018D 48BF-                       mov rdi, input_buffer
   123 0000018F [0000000000000000] 
   124 00000197 E8(00000000)                call atof
   125 0000019C F20F110425-                 movsd [current_value], xmm0
   125 000001A1 [D0000000]         
   126                                  
   127                                      ; Calculate resistance
   128 000001A5 F20F100425-                 movsd xmm0, [emf_value]
   128 000001AA [C8000000]         
   129 000001AE F20F100C25-                 movsd xmm1, [current_value]
   129 000001B3 [D0000000]         
   130 000001B7 F20F5EC1                    divsd xmm0, xmm1    ; EMF / Current
   131 000001BB F20F110425-                 movsd [resistance_value], xmm0
   131 000001C0 [D8000000]         
   132                                  
   133                                      ; Convert resistance to string
   134 000001C4 F20F100425-                 movsd xmm0, [resistance_value]  ; Move the resistance value to xmm0
   134 000001C9 [D8000000]         
   135 000001CD 4C89DE                      mov rsi, r11         ; Address of output buffer
   136 000001D0 BA64000000                  mov rdx, 100                    ; Buffer size
   137 000001D5 E8(00000000)                call ftoa                       ; Call ftoa with xmm0 input
   138                                  
   139                                      ; Debug prints
   140                                      STRLEN r9, result_msg
   140 000001DA 57                  <1>  push rdi
   140 000001DB 48BF-               <1>  mov rdi, %2
   140 000001DD [EB00000000000000]  <1>
   140                              <1> 
   140 000001E5 4D31C9              <1>  xor %1, %1
   140                              <1> %%strlen_loop:
   140 000001E8 803F00              <1>  cmp byte [rdi], 0
   140 000001EB 7408                <1>  je %%strlen_done
   140 000001ED 48FFC7              <1>  inc rdi
   140 000001F0 49FFC1              <1>  inc %1
   140 000001F3 EBF3                <1>  jmp %%strlen_loop
   140                              <1> 
   140                              <1> %%strlen_done:
   140 000001F5 5F                  <1>  pop rdi
   141 000001F6 B801000000                  mov rax, 1
   142 000001FB BF01000000                  mov rdi, 1
   143 00000200 48BE-                       mov rsi, result_msg        ; "The resistance in this circuit is "
   143 00000202 [EB00000000000000] 
   144 0000020A 4C89CA                      mov rdx, r9                ; Message length
   145 0000020D 0F05                        syscall
   146                                  
   147 0000020F B801000000                  mov rax, 1
   148 00000214 BF01000000                  mov rdi, 1
   149 00000219 4C89DE                      mov rsi, r11     ; Converted resistance
   150 0000021C BA14000000                  mov rdx, 20                ; Reasonable buffer size
   151 00000221 0F05                        syscall
   152                                  
   153                                      ; Newline
   154 00000223 B801000000                  mov rax, 1
   155 00000228 BF01000000                  mov rdi, 1
   156 0000022D 48BE-                       mov rsi, dot_msg           ; ".\n"
   156 0000022F [1901000000000000] 
   157 00000237 BA02000000                  mov rdx, 2
   158 0000023C 0F05                        syscall
   159                                  
   160                                      ; Exit program
   161 0000023E B83C000000                  mov rax, 60         ; sys_exit
   162 00000243 4831FF                      xor rdi, rdi        ; exit code 0
   163 00000246 0F05                        syscall
